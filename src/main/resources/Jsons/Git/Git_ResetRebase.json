[
  {
    "title":"Git Reset",
    "preDescription":["Reset command of git is one of the most powerful commands.To use it we exactly need to understand its working.",
    "git reset has 3 main options:",
    "1. --hard","2. --soft","3. --mixed(default option).",
    "Let us understand reset by example first, before going into the options."],
    "note":null,
    "mainDescription":["<-- get reset --> moves the whole branch to the commitId provided.",
    "Consider the current commit at ff56768, we updated some files and committed to the repository. Now the head has moved to klmn002.",
    "If we do a <-- git reset ff56768 -->, the HEAD is moved back to ff56768 and the previous head at klmn002 will be garbage collected."],
    "image":"git/git_reset.PNG",
    "code":null,
    "postDescription":["Let us now look at the options it provides."]
  },
  {
    "title":"Git Reset --options",
    "preDescription":["As said before, git reset provides with 3 options: --hard , --soft, --mixed(default)."],
    "note":null,
    "mainDescription":["--hard : Will move the repository changes to both the working and the staging area.",
    "--mixed : Will move the repository changes to the staging area only.",
    "--soft : Will just move the HEAD in the repository and NO changes will be moved."],
    "image":"git/git_reset_options.PNG",
    "code":null,
    "postDescription":null
  },
  {
    "title":"Git Rebase",
    "preDescription":["Git rebase puts the commit on top of the head."],
    "note":"Never Rebase a Shared Commit",
    "mainDescription":["Shown in the diagram I have 2 branches: master and branch_1.",
    "Consider branch_1 has additional commits , then doing a git rebase master , would put the commit on top of the master HEAD.",
    "Then if we come to master and do : git rebase branch1 , the HEAD would fast-forward as shown below."],
    "image":"git/git_rebase.PNG",
    "code":["git rebase master","git rebase branch1"],
    "postDescription":null
  }
]