[
  {
    "title":"Git Reset",
    "preDescription":["Reset command of git is one of the most ppowerful commands out there.To use it we exactly need to understand its working.",
    "git reset has 3 main options that come with it :",
    "1. --hard","2. --soft","3. --mixed . This is the default option",
    "Let us understand reset by example first before going into there options"],
    "note":null,
    "mainDescription":["get reset move the whole branch to the commit id provided.",
    "Consider the current commit at ff56768, we updated some files are commit to the repository.Now the head has moved to klmn002.",
    "If we do a git reser ff56768, the head is moved back to ff56768 and the previous head at klmn002 will be garbage collected"],
    "image":"git/git_reset.PNG",
    "code":null,
    "postDescription":["Let us now look at the options it provides"]
  },
  {
    "title":"Git Reset --options",
    "preDescription":["As said before, git reset provides with 3 options: --hard , --soft, --mixed(default)."],
    "note":null,
    "mainDescription":["--hard : will get the repository changes to both the working and staging area.",
    "--mixed : will get the repository changes to the staging area only.",
    "--soft : will just move the branch and NO changes will be copied."],
    "image":"git/git_reset_options.PNG",
    "code":null,
    "postDescription":null
  },
  {
    "title":"Git Rebase",
    "preDescription":["Git rebase puts the commit on top of the head."],
    "note":null,
    "mainDescription":["Shown in the diagram I have 2 branches: master and branch_1",
    "Consider branch_1 has additional commits , then doing a git rebase master , would put the commit on top of the master head",
    "Then if we come to master and do : git rebase branch1 , the head would fast-forward as shown below"],
    "image":"git/git_rebase.PNG",
    "code":["git rebase master","git rebase branch1"],
    "postDescription":null
  }
]